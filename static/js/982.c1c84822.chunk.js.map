{"version":3,"file":"static/js/982.c1c84822.chunk.js","mappings":"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","sources":["pages/auth/SignUp.jsx"],"sourcesContent":["import { useFormik } from \"formik\";\nimport { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { toast } from \"react-hot-toast\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport SubmitBtn from \"../../components/buttons/SubmitBtn\";\nimport { signUp } from \"../../store/auth\";\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(\"Please enter name\"),\n  email: Yup.string()\n    .matches(\n      /^[a-zA-Z0-9]+@[a-zA-Z]+\\.[a-zA-Z]{2,3}$/i,\n      \"Please enter a valid email address\"\n    )\n    .required(\"Please enter email\"),\n  password: Yup.string()\n    .matches(\n      /(?=.*[a-z]{2,})(?=.*[A-Z]{2,})(?=.*[0-9]{3,})(?=.*[@$%#]{1,})[a-zA-Z\\d@$%#]{8,}/,\n      \"Please enter a password like that | aaAA889@\"\n    )\n    .required(\"Please enter password\"),\n  rePassword: Yup.string()\n    .oneOf([Yup.ref(\"password\")], \"Passwords must match\")\n    .required(\"Please confirm your password\"),\n});\n\nfunction SignUp() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { loading } = useSelector((state) => state.authSlice);\n  const [terms, setTerms] = useState(false);\n\n  const initialValues = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    rePassword: \"\",\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    async onSubmit(data, { resetForm }) {\n      try {\n        resetForm();\n        await dispatch(signUp(data)).unwrap();\n        setTerms(false);\n        navigate(\"/\");\n        toast.success(`Signup Successfully, welcome ${data.name}`);\n      } catch (err) {\n        toast.error(err);\n      }\n    },\n  });\n\n  const CheckboxChangeHandler = () => setTerms((terms) => !terms);\n\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      {/* Name */}\n      <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\n        <Form.Label>Name</Form.Label>\n        <Form.Control\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter your name\"\n          autoComplete=\"off\"\n        />\n        {formik.touched.name && formik.errors.name && (\n          <Form.Text className=\"text-muted\">{formik.errors.name}</Form.Text>\n        )}\n      </Form.Group>\n\n      {/* Email */}\n      <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n        <Form.Label>Email</Form.Label>\n        <Form.Control\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Enter your email\"\n          autoComplete=\"off\"\n        />\n        {formik.touched.email && formik.errors.email && (\n          <Form.Text className=\"text-muted\">{formik.errors.email}</Form.Text>\n        )}\n      </Form.Group>\n\n      {/* Password */}\n      <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n        <Form.Label>Password</Form.Label>\n        <Form.Control\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          autoComplete=\"off\"\n        />\n        {formik.touched.password && formik.errors.password && (\n          <Form.Text className=\"text-muted\">{formik.errors.password}</Form.Text>\n        )}\n      </Form.Group>\n\n      {/* Confirm Password */}\n      <Form.Group className=\"mb-3\" controlId=\"formBasicConfirmPassword\">\n        <Form.Label>Confirm Password</Form.Label>\n        <Form.Control\n          value={formik.values.rePassword}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          type=\"password\"\n          name=\"rePassword\"\n          placeholder=\"Confirm Password\"\n          autoComplete=\"off\"\n        />\n        {formik.touched.rePassword && formik.errors.rePassword && (\n          <Form.Text className=\"text-muted\">\n            {formik.errors.rePassword}\n          </Form.Text>\n        )}\n      </Form.Group>\n\n      {/* Go to login */}\n      <p className=\"text-end\">\n        You have an account ?\n        <Link\n          to=\"/auth\"\n          className=\"ms-1 link-underline link-underline-opacity-0\"\n        >\n          login\n        </Link>\n      </p>\n\n      {/* Agree for terms and conditions */}\n      <Form.Check\n        className=\"mb-4\"\n        type=\"checkbox\"\n        checked={terms}\n        id=\"checkbox\"\n        onChange={CheckboxChangeHandler}\n        label=\"Agree terms and conditions\"\n      />\n\n      <SubmitBtn\n        loading={loading}\n        title=\"Sign up\"\n        disabled={!terms || loading}\n      />\n    </Form>\n  );\n}\n\nexport default SignUp;\n"],"names":["validationSchema","Yup","shape","name","required","email","matches","password","rePassword","oneOf","dispatch","useDispatch","navigate","useNavigate","loading","useSelector","state","authSlice","useState","terms","setTerms","formik","useFormik","initialValues","onSubmit","data","resetForm","signUp","unwrap","toast","handleSubmit","className","controlId","value","values","onChange","handleChange","onBlur","handleBlur","type","placeholder","autoComplete","touched","errors","Link","to","checked","id","label","title","disabled"],"sourceRoot":""}